<div id="map" class="map"></div>
<script>
    @{
        @inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment environment;
        var earthquakeController = new Epicentrum.Controllers.EarthquakeController(environment);
        var epicentrumGeojson = earthquakeController.GetEpicentrums();
    }

    var epicentrumGeojson = @Html.Raw(Json.Serialize(epicentrumGeojson));

    var epicentrumSource = new ol.source.Vector({
        features: getFeatures(epicentrumGeojson)
    });

    var epicentrumClusterSource = new ol.source.Cluster({
        distance: 20,
        source: epicentrumSource
    });

    var epicentrumLayer = new ol.layer.Vector({
        source: epicentrumClusterSource,
        style: feature => { return getProperStyle(feature) }
    });

    var backgroundLayer = new ol.layer.Tile({
        source: new ol.source.XYZ({
            url:'https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}',
        }),
    });

    var map = new ol.Map({
        target: 'map',
        controls: [],
        layers: [backgroundLayer, epicentrumLayer],
        view: new ol.View({
            center: ol.proj.fromLonLat([0, 10]),
            zoom: 1
        })
    });

    function getFeatures(geojson) {
        var geojsonReader = new ol.format.GeoJSON();
        var features = geojsonReader.readFeatures(geojson);
        features.forEach(customizeFeature);
        return features;
    }

    function customizeFeature(feature) {
        feature.getGeometry().transform('EPSG:4326', 'EPSG:3857');
        feature.setStyle(getSingleStyle(feature));
        return feature;
    }

    function getSingleStyle(feature) {
        return new ol.style.Style({
            image: new ol.style.RegularShape({
                points: 5,
                radius: 8,
                fill: new ol.style.Fill({
                    color: feature.get('color')
                })
            })
        });
    }

    function getClusterStyle(feature, size) {
        return new ol.style.Style({
            image: new ol.style.Circle({
                radius: 10 + Math.sqrt(size),
                fill: new ol.style.Fill({
                    color: 'Coral'
                }),
            }),
            text: new ol.style.Text({
                text: size.toString(),
                fill: new ol.style.Fill({
                    color: 'white'
                })
            })
        });
    }

    function getProperStyle(feature) {
        var style = feature.get('features')[0].getStyle();
        var size = feature.get('features').length;
        if (size !== 1)
            style = getClusterStyle(feature, size);
        return style;
    }

    var epicentrumInteraction = new ol.interaction.Select({
        condition: ol.events.condition.click,
        layers: [epicentrumLayer],
        style: false
    });

    map.addInteraction(epicentrumInteraction);
    epicentrumInteraction.on('select', event => getDetails(event) );

    function getDetails(event) {
        var selectedFeature = getSingleFeature(event);
        if (selectedFeature) {
            var url = "/Earthquake/Details/" + selectedFeature.getId();
            getRequest(url, fillModal);
        }
    }

    function getRequest(url, succesFunction) {
        $.ajax({
            contentType: "application/json; charset=utf-8",
            type: "GET",
            url: url,
            cache: false,
            success: data => { succesFunction(data) },
            error: jqXHR => { console.log(jqXHR) }
        });
    }

    function fillModal(details) {
        document.getElementById('date').innerText = details.date.substring(0, details.date.indexOf('T'));
        document.getElementById('location').innerText = details.location;
        document.getElementById('magnitude').innerText = details.magnitude;
        document.getElementById('deaths').innerHTML = details.deaths;
        document.getElementById('earthquake').click();
    }

    function getSingleFeature(event) {
        if (event.selected.length) {
            var selectedFeatures = event.selected[0].get('features')
            if (selectedFeatures.length === 1)
                return selectedFeatures[0];
        }
        return null;
    }

    function applyFilter() {
        var year = $('#yearInput').val();
        var deaths = $('#deathsInput').val();
        var url = "/Earthquake/GetEpicentrumsBy?year=" + year + "&deaths=" + deaths;
        getRequest(url, reloadFeatures);
        $('#filterModal').modal('hide');
    }

    function removeFilter() {
        var url = "/Earthquake/GetEpicentrums";
        getRequest(url, reloadFeatures);
        $('#filterModal').modal('hide');
        $('#yearInput').val("");
        $('#deathsInput').val("");
    }

    function reloadFeatures(geojson) {
        var newFeatures = getFeatures(geojson);
        epicentrumLayer.getSource().getSource().clear();
        epicentrumLayer.getSource().getSource().addFeatures(newFeatures);
    }

</script>
